{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\git\\\\Visual-Studio\\\\React\\\\alien-clock\\\\src\\\\components\\\\alienClockApp.jsx\";\nimport React, { Component } from 'react';\nimport AlienClockDisplay from './alienClockDisplay'; // Update to match the actual filename\nimport SetAlienClockButton from './setAlienClockButton'; // Update to match the actual filename\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AlienClockApp extends Component {\n  constructor(props) {\n    super(props);\n\n    // Get the current system time\n    this.updateAlienClock = () => {\n      const {\n        alienYear,\n        alienMonth,\n        alienDay,\n        alienHour,\n        alienMinute,\n        alienSecond\n      } = this.state;\n      let newSecond = alienSecond + 1;\n      if (newSecond >= 90) {\n        newSecond = 0;\n        let newMinute = alienMinute + 1;\n        if (newMinute >= 90) {\n          newMinute = 0;\n          let newHour = alienHour + 1;\n          if (newHour >= 36) {\n            newHour = 0;\n            let newDay = alienDay + 1;\n            if (newDay > daysInMonth[alienYear % 2][alienMonth - 1]) {\n              newDay = 1;\n              let newMonth = alienMonth + 1;\n              if (newMonth > 18) {\n                newMonth = 1;\n                const newYear = alienYear + 1;\n                this.setState({\n                  alienYear: newYear\n                });\n              }\n              this.setState({\n                alienMonth: newMonth\n              });\n            }\n            this.setState({\n              alienDay: newDay\n            });\n          }\n          this.setState({\n            alienHour: newHour\n          });\n        }\n        this.setState({\n          alienMinute: newMinute\n        });\n      }\n      this.setState({\n        alienSecond: newSecond\n      });\n    };\n    this.setAlienClock = () => {\n      // Implement the logic to set the Alien time based on user input\n      // You can use this method to allow users to set a specific Alien time\n    };\n    const now = new Date();\n    this.state = {\n      alienYear: now.getFullYear(),\n      // Get the current year\n      alienMonth: now.getMonth() + 1,\n      // Get the current month (0-based)\n      alienDay: now.getDate(),\n      // Get the current day of the month\n      alienHour: now.getHours(),\n      // Get the current hour (24-hour format)\n      alienMinute: now.getMinutes(),\n      // Get the current minute\n      alienSecond: now.getSeconds() // Get the current second\n    };\n  }\n\n  componentDidMount() {\n    this.updateClockInterval = setInterval(this.updateAlienClock, 500); // Update every 1 Alien second (500ms in Earth time)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateClockInterval);\n  }\n  render() {\n    const {\n      alienYear,\n      alienMonth,\n      alienDay,\n      alienHour,\n      alienMinute,\n      alienSecond\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alien-clock\",\n      children: [/*#__PURE__*/_jsxDEV(AlienClockDisplay, {\n        alienYear: alienYear,\n        alienMonth: alienMonth,\n        alienDay: alienDay,\n        alienHour: alienHour,\n        alienMinute: alienMinute,\n        alienSecond: alienSecond\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SetAlienClockButton, {\n        onClick: this.setAlienClock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AlienClockApp;","map":{"version":3,"names":["React","Component","AlienClockDisplay","SetAlienClockButton","jsxDEV","_jsxDEV","AlienClockApp","constructor","props","updateAlienClock","alienYear","alienMonth","alienDay","alienHour","alienMinute","alienSecond","state","newSecond","newMinute","newHour","newDay","daysInMonth","newMonth","newYear","setState","setAlienClock","now","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","componentDidMount","updateClockInterval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/Users/DELL/OneDrive/Documents/git/Visual-Studio/React/alien-clock/src/components/alienClockApp.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport AlienClockDisplay from './alienClockDisplay'; // Update to match the actual filename\r\nimport SetAlienClockButton from './setAlienClockButton'; // Update to match the actual filename\r\n\r\nclass AlienClockApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Get the current system time\r\n    const now = new Date();\r\n\r\n    this.state = {\r\n      alienYear: now.getFullYear(),    // Get the current year\r\n      alienMonth: now.getMonth() + 1, // Get the current month (0-based)\r\n      alienDay: now.getDate(),         // Get the current day of the month\r\n      alienHour: now.getHours(),       // Get the current hour (24-hour format)\r\n      alienMinute: now.getMinutes(),   // Get the current minute\r\n      alienSecond: now.getSeconds(),   // Get the current second\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.updateClockInterval = setInterval(this.updateAlienClock, 500); // Update every 1 Alien second (500ms in Earth time)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateClockInterval);\r\n  }\r\n\r\n  updateAlienClock = () => {\r\n    const {\r\n      alienYear,\r\n      alienMonth,\r\n      alienDay,\r\n      alienHour,\r\n      alienMinute,\r\n      alienSecond,\r\n    } = this.state;\r\n\r\n    let newSecond = alienSecond + 1;\r\n    if (newSecond >= 90) {\r\n      newSecond = 0;\r\n      let newMinute = alienMinute + 1;\r\n      if (newMinute >= 90) {\r\n        newMinute = 0;\r\n        let newHour = alienHour + 1;\r\n        if (newHour >= 36) {\r\n          newHour = 0;\r\n          let newDay = alienDay + 1;\r\n          if (newDay > daysInMonth[alienYear % 2][alienMonth - 1]) {\r\n            newDay = 1;\r\n            let newMonth = alienMonth + 1;\r\n            if (newMonth > 18) {\r\n              newMonth = 1;\r\n              const newYear = alienYear + 1;\r\n              this.setState({\r\n                alienYear: newYear,\r\n              });\r\n            }\r\n            this.setState({\r\n              alienMonth: newMonth,\r\n            });\r\n          }\r\n          this.setState({\r\n            alienDay: newDay,\r\n          });\r\n        }\r\n        this.setState({\r\n          alienHour: newHour,\r\n        });\r\n      }\r\n      this.setState({\r\n        alienMinute: newMinute,\r\n      });\r\n    }\r\n    this.setState({\r\n      alienSecond: newSecond,\r\n    });\r\n  };\r\n\r\n  \r\n  setAlienClock = () => {\r\n    // Implement the logic to set the Alien time based on user input\r\n    // You can use this method to allow users to set a specific Alien time\r\n  };\r\n\r\n  render() {\r\n    const { alienYear, alienMonth, alienDay, alienHour, alienMinute, alienSecond } = this.state;\r\n\r\n    return (\r\n      <div className=\"alien-clock\">\r\n        <AlienClockDisplay\r\n          alienYear={alienYear}\r\n          alienMonth={alienMonth}\r\n          alienDay={alienDay}\r\n          alienHour={alienHour}\r\n          alienMinute={alienMinute}\r\n          alienSecond={alienSecond}\r\n        />\r\n        <SetAlienClockButton onClick={this.setAlienClock} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlienClockApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}