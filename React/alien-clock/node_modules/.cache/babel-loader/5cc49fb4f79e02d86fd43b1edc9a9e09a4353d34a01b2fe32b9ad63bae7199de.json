{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\git\\\\Visual-Studio\\\\React\\\\alien-clock\\\\src\\\\components\\\\alienClockDisplay.jsx\";\nimport React, { Component } from 'react';\nimport AlienClockDisplay from './alienClockDisplay';\nimport SetAlienClockButton from './setAlienClockButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AlienClockApp extends Component {\n  constructor(props) {\n    super(props);\n    this.getAlienTime = earthTime => {\n      // Calculate Alien time values based on the current Earth time\n      const earthYear = earthTime.getFullYear();\n      const earthMonth = earthTime.getMonth() + 1;\n      const earthDay = earthTime.getDate();\n      const earthHour = earthTime.getHours();\n      const earthMinute = earthTime.getMinutes();\n      const earthSecond = earthTime.getSeconds();\n\n      // Implement your conversion logic to calculate Alien time here\n      // For now, I'm just copying Earth time to Alien time as a placeholder\n      return {\n        year: earthYear,\n        month: earthMonth,\n        day: earthDay,\n        hour: earthHour,\n        minute: earthMinute,\n        second: earthSecond\n      };\n    };\n    this.updateAlienClock = () => {\n      const {\n        alienSecond,\n        alienMinute,\n        alienHour,\n        alienDay,\n        alienMonth,\n        alienYear\n      } = this.state;\n\n      // Increment the Alien second\n      let newSecond = alienSecond + 1;\n      if (newSecond >= 90) {\n        newSecond = 0;\n\n        // Increment the Alien minute\n        let newMinute = alienMinute + 1;\n        if (newMinute >= 90) {\n          newMinute = 0;\n\n          // Increment the Alien hour\n          let newHour = alienHour + 1;\n          if (newHour >= 36) {\n            newHour = 0;\n\n            // Increment the Alien day\n            let newDay = alienDay + 1;\n            if (newDay > this.daysInMonth[alienYear % 2][alienMonth - 1]) {\n              newDay = 1;\n\n              // Increment the Alien month\n              let newMonth = alienMonth + 1;\n              if (newMonth > 18) {\n                newMonth = 1;\n\n                // Increment the Alien year\n                const newYear = alienYear + 1;\n                this.setState({\n                  alienYear: newYear\n                });\n              }\n              this.setState({\n                alienMonth: newMonth\n              });\n            }\n            this.setState({\n              alienDay: newDay\n            });\n          }\n          this.setState({\n            alienHour: newHour\n          });\n        }\n        this.setState({\n          alienMinute: newMinute\n        });\n      }\n      this.setState({\n        alienSecond: newSecond\n      });\n    };\n    this.setAlienClock = () => {\n      // Implement the logic to set the Alien time based on user input\n      // You should update the state with the new Alien time values\n    };\n    this.daysInMonth = [[44, 42, 48, 40, 48, 44, 40, 44, 42], [40, 40, 42, 44, 48, 42, 40, 44, 38]];\n    const now = new Date();\n\n    // Calculate the initial Alien time based on the current Earth time\n    const alienTime = this.getAlienTime(now);\n    this.state = {\n      alienYear: alienTime.year,\n      alienMonth: alienTime.month,\n      alienDay: alienTime.day,\n      alienHour: alienTime.hour,\n      alienMinute: alienTime.minute,\n      alienSecond: alienTime.second\n    };\n  }\n  componentDidMount() {\n    this.updateClockInterval = setInterval(this.updateAlienClock, 500); // Update every 1 alien second (every 500ms earth second)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateClockInterval);\n  }\n  render() {\n    const {\n      alienYear,\n      alienMonth,\n      alienDay,\n      alienHour,\n      alienMinute,\n      alienSecond\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alien-clock\",\n      children: [/*#__PURE__*/_jsxDEV(AlienClockDisplay, {\n        alienYear: alienYear,\n        alienMonth: alienMonth,\n        alienDay: alienDay,\n        alienHour: alienHour,\n        alienMinute: alienMinute,\n        alienSecond: alienSecond\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SetAlienClockButton, {\n        onClick: this.setAlienClock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AlienClockApp;","map":{"version":3,"names":["React","Component","AlienClockDisplay","SetAlienClockButton","jsxDEV","_jsxDEV","AlienClockApp","constructor","props","getAlienTime","earthTime","earthYear","getFullYear","earthMonth","getMonth","earthDay","getDate","earthHour","getHours","earthMinute","getMinutes","earthSecond","getSeconds","year","month","day","hour","minute","second","updateAlienClock","alienSecond","alienMinute","alienHour","alienDay","alienMonth","alienYear","state","newSecond","newMinute","newHour","newDay","daysInMonth","newMonth","newYear","setState","setAlienClock","now","Date","alienTime","componentDidMount","updateClockInterval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/Users/DELL/OneDrive/Documents/git/Visual-Studio/React/alien-clock/src/components/alienClockDisplay.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport AlienClockDisplay from './alienClockDisplay';\r\nimport SetAlienClockButton from './setAlienClockButton';\r\n\r\nclass AlienClockApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.daysInMonth = [\r\n      [44, 42, 48, 40, 48, 44, 40, 44, 42],\r\n      [40, 40, 42, 44, 48, 42, 40, 44, 38],\r\n    ];\r\n\r\n    const now = new Date();\r\n\r\n    // Calculate the initial Alien time based on the current Earth time\r\n    const alienTime = this.getAlienTime(now);\r\n\r\n    this.state = {\r\n      alienYear: alienTime.year,\r\n      alienMonth: alienTime.month,\r\n      alienDay: alienTime.day,\r\n      alienHour: alienTime.hour,\r\n      alienMinute: alienTime.minute,\r\n      alienSecond: alienTime.second,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateClockInterval = setInterval(this.updateAlienClock, 500); // Update every 1 alien second (every 500ms earth second)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateClockInterval);\r\n  }\r\n\r\n  getAlienTime = (earthTime) => {\r\n    // Calculate Alien time values based on the current Earth time\r\n    const earthYear = earthTime.getFullYear();\r\n    const earthMonth = earthTime.getMonth() + 1;\r\n    const earthDay = earthTime.getDate();\r\n    const earthHour = earthTime.getHours();\r\n    const earthMinute = earthTime.getMinutes();\r\n    const earthSecond = earthTime.getSeconds();\r\n\r\n    // Implement your conversion logic to calculate Alien time here\r\n    // For now, I'm just copying Earth time to Alien time as a placeholder\r\n    return {\r\n      year: earthYear,\r\n      month: earthMonth,\r\n      day: earthDay,\r\n      hour: earthHour,\r\n      minute: earthMinute,\r\n      second: earthSecond,\r\n    };\r\n  };\r\n\r\n  updateAlienClock = () => {\r\n    const { alienSecond, alienMinute, alienHour, alienDay, alienMonth, alienYear } = this.state;\r\n\r\n    // Increment the Alien second\r\n    let newSecond = alienSecond + 1;\r\n\r\n    if (newSecond >= 90) {\r\n      newSecond = 0;\r\n\r\n      // Increment the Alien minute\r\n      let newMinute = alienMinute + 1;\r\n\r\n      if (newMinute >= 90) {\r\n        newMinute = 0;\r\n\r\n        // Increment the Alien hour\r\n        let newHour = alienHour + 1;\r\n\r\n        if (newHour >= 36) {\r\n          newHour = 0;\r\n\r\n          // Increment the Alien day\r\n          let newDay = alienDay + 1;\r\n\r\n          if (newDay > this.daysInMonth[alienYear % 2][alienMonth - 1]) {\r\n            newDay = 1;\r\n\r\n            // Increment the Alien month\r\n            let newMonth = alienMonth + 1;\r\n\r\n            if (newMonth > 18) {\r\n              newMonth = 1;\r\n\r\n              // Increment the Alien year\r\n              const newYear = alienYear + 1;\r\n\r\n              this.setState({\r\n                alienYear: newYear,\r\n              });\r\n            }\r\n\r\n            this.setState({\r\n              alienMonth: newMonth,\r\n            });\r\n          }\r\n\r\n          this.setState({\r\n            alienDay: newDay,\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          alienHour: newHour,\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        alienMinute: newMinute,\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      alienSecond: newSecond,\r\n    });\r\n  };\r\n\r\n  setAlienClock = () => {\r\n    // Implement the logic to set the Alien time based on user input\r\n    // You should update the state with the new Alien time values\r\n  };\r\n\r\n  render() {\r\n    const { alienYear, alienMonth, alienDay, alienHour, alienMinute, alienSecond } = this.state;\r\n\r\n    return (\r\n      <div className=\"alien-clock\">\r\n        <AlienClockDisplay\r\n          alienYear={alienYear}\r\n          alienMonth={alienMonth}\r\n          alienDay={alienDay}\r\n          alienHour={alienHour}\r\n          alienMinute={alienMinute}\r\n          alienSecond={alienSecond}\r\n        />\r\n        <SetAlienClockButton onClick={this.setAlienClock} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlienClockApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}